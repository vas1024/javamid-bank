package javamid.exchange.config;

import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import java.util.List;

@Configuration
public class JwtConfig {

  private final DiscoveryClient discoveryClient;

  public JwtConfig(DiscoveryClient discoveryClient) {
    this.discoveryClient = discoveryClient;
  }

  /*
  @Bean
  public JwtDecoder jwtDecoder() {
    String jwksUrl = getJwksUrlFromEureka();
    System.out.println("üîê Using JWKS URL: " + jwksUrl);
    return NimbusJwtDecoder.withJwkSetUri(jwksUrl).build();
  }*/

  @Bean
  public JwtDecoder jwtDecoder() {
    String jwksUrl = getJwksUrlFromEureka();
    System.out.println("üîê Using JWKS URL: " + jwksUrl);

    NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUrl).build();

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    return token -> {
      System.out.println("=== EXCHANGE SERVICE JWT DECODING ===");
      System.out.println("üîê Received JWT token: " + token);

      try {
        Jwt jwt = jwtDecoder.decode(token);

        System.out.println("üìÑ JWT Details:");
        System.out.println("   üë§ Subject: " + jwt.getSubject());
        System.out.println("   üìã Scopes: " + jwt.getClaimAsStringList("scope"));
        System.out.println("   üÜî JWT ID: " + jwt.getId());
        System.out.println("   üè¢ Issuer: " + jwt.getIssuer());
        System.out.println("   ‚è∞ Expires: " + jwt.getExpiresAt());
        System.out.println("   üéØ Audience: " + jwt.getAudience());
        System.out.println("   üìù Claims: " + jwt.getClaims());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ scope 'write'
        List<String> scopes = jwt.getClaimAsStringList("scope");
        boolean hasWriteScope = scopes != null && scopes.contains("write");
        System.out.println("   ‚úÖ Has 'write' scope: " + hasWriteScope);

        System.out.println("=== END JWT DECODING ===");

        return jwt;

      } catch (Exception e) {
        System.out.println("‚ùå JWT Decoding failed: " + e.getMessage());
        System.out.println("=== END JWT DECODING ===");
        throw e;
      }
    };
  }



  private String getJwksUrlFromEureka() {
    try {
      // –ò—â–µ–º —Å–µ—Ä–≤–∏—Å "auth" –≤ Eureka
      List<org.springframework.cloud.client.ServiceInstance> instances = discoveryClient.getInstances("auth");

      if (instances != null && !instances.isEmpty()) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
        org.springframework.cloud.client.ServiceInstance instance = instances.get(0);
        String url = instance.getUri() + "/oauth2/jwks";
        System.out.println("‚úÖ Found auth service in Eureka: " + url);
        return url;
      } else {
        System.out.println("‚ö†Ô∏è Auth service not found in Eureka, using fallback");
      }
    } catch (Exception e) {
      System.out.println("‚ö†Ô∏è Error discovering auth service: " + e.getMessage());
    }

    // Fallback –Ω–∞ localhost –µ—Å–ª–∏ Eureka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    return "http://localhost:9000/oauth2/jwks";
  }
}
